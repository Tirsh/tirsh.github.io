{"version":3,"file":"static/js/14.7fc540fc.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/singleItems/SingleItem.js","components/singleItems/SingleComic.js","components/singleItems/SingleCharacter.js","components/pages/SingleLayoutPage.js","services/MarvelServices.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport './singleItem.scss';\r\nimport setContent from '../../utils/setContent';\r\nimport useMarvelServices from '../../services/MarvelServices';\r\n\r\nconst SingleItem = ({id, contentType}) => {\r\n    const {getCharacter, getComic, clearError, setProcess, process} = useMarvelServices();\r\n    const [item, setItem] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    const goBack = () => {\r\n        navigate(-1);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        loadItem();\r\n    }, [])\r\n\r\n    const loadItem = () => {\r\n        clearError();\r\n        switch (contentType){\r\n            case \"comic\":\r\n                getComic(id)\r\n                .then(setItem)\r\n                .then(() => setProcess('confirmed'));\r\n                break;\r\n            case \"char\":\r\n                getCharacter(id)\r\n                .then(setItem)\r\n                .then(() => setProcess('confirmed'));\r\n                break;\r\n            default:\r\n                throw new Error(\"Wrong value\") \r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"single-item\">\r\n            {setContent(process, () => <View data={item} contentType={contentType}/>)}      \r\n            <div onClick={goBack} className=\"single-item__back\">Back to all</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data, contentType}) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{data.title}</title>\r\n            </Helmet>\r\n            <img src={data.thumbnail} alt={data.title} className=\"single-item__img\"/>\r\n            <div className=\"single-item__info\">\r\n                <h2 className=\"single-item__name\">{data.title}</h2>\r\n                <p className=\"single-item__descr\">{data.description}</p>\r\n                {contentType === \"comic\" ? (<>\r\n                    <p className=\"single-item__descr\">{data.pages ? `${data.pages} pages` : 'No info'}</p>\r\n                    <p className=\"single-item__descr\">{`Language: ${data.lang ? data.lang : 'No info'}`}</p>\r\n                    <div className=\"single-item__price\">{data.price ? `${data.price} $`: 'No info'}</div>\r\n                    </>\r\n                ) : null}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SingleItem;","import { Helmet } from 'react-helmet';\r\n\r\nimport SingleItem from './SingleItem';\r\n\r\nconst SingleComic = ({id}) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with imformation about comic\"\r\n                />\r\n            </Helmet>\r\n            <SingleItem id={id} contentType={\"comic\"}/>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default SingleComic;","import { Helmet } from 'react-helmet';\r\nimport SingleItem from './SingleItem';\r\n\r\nconst SingleCharacter = ({id}) => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Page with imformation about comic\"\r\n            />\r\n            </Helmet>\r\n            <SingleItem id={id} contentType={\"char\"}/>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default SingleCharacter;","import { useParams } from \"react-router\";\r\nimport SingleComic from \"../singleItems/SingleComic\";\r\nimport SingleCharacter from \"../singleItems/SingleCharacter\";\r\n\r\nconst SingleLayoutPage = ({char}) => {\r\n    const {id} = useParams();\r\n    return (\r\n        char ? <SingleCharacter id={id}/> : <SingleComic id={id}/>\r\n    );\r\n}\r\n\r\nexport default SingleLayoutPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelServices = () => {\r\n\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apikey = 'apikey=5b914e3fbef97f81d2a62f14f887c53d';\r\n\r\n    const getAllCharacters = async (offset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComic = async (offset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apikey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apikey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&limit=2&${_apikey}`);\r\n        if (res.data.total === 0 ) {\r\n            return null\r\n        }\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformDescription = (descr) => {\r\n        if(!descr) {\r\n            return \"We don't have any information about this character!\"\r\n        }\r\n        return descr;\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            title: char.name,\r\n            description: _transformDescription(char.description),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            stories: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description,\r\n            pages: comic.pageCount,\r\n            lang: null,\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price\r\n        }\r\n    }\r\n\r\n    const editPictureStyles = (pictureUrl) => {\r\n        if (!pictureUrl) {\r\n            return null;\r\n        }\r\n        const imgStyles = {objectFit: 'cover'};\r\n        if (pictureUrl.search(/image_not_available/) !== -1) {\r\n            imgStyles.objectFit = 'contain';\r\n        }\r\n        return imgStyles;\r\n    }\r\n\r\n    return {loading,\r\n            error,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            getCharacterByName, \r\n            getAllComic, \r\n            getComic, \r\n            editPictureStyles, \r\n            clearError, \r\n            process,\r\n            setProcess\r\n        }\r\n}\r\n\r\nexport default useMarvelServices;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);  \r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method=\"GET\", body=null, headers = {'Content-Type': 'application/json'} ) => {\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e){\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n        }, []);\r\n    return {loading, request, error, clearError, process, setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref2","data","contentType","_jsxs","_Fragment","children","Helmet","title","thumbnail","className","description","pages","concat","lang","price","_ref","id","_useMarvelServices","useMarvelServices","getCharacter","getComic","clearError","setProcess","process","_useState","useState","_useState2","_slicedToArray","item","setItem","navigate","useNavigate","useEffect","loadItem","then","Error","setContent","onClick","name","content","SingleItem","char","useParams","SingleCharacter","SingleComic","_useHttp","loading","setLoading","_useState3","_useState4","error","setError","_useState5","_useState6","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","status","json","abrupt","t0","message","stop","_x","apply","useHttp","_apiBase","_apikey","getAllCharacters","offset","res","results","map","_transformCharacter","getAllComic","_callee2","_context2","_transformComic","_x2","_ref3","_callee3","_context3","_x3","_ref4","_callee4","_context4","_x4","getCharacterByName","_ref5","_callee5","_context5","total","_x5","descr","path","extension","homepage","urls","wiki","stories","comics","items","comic","pageCount","prices","editPictureStyles","pictureUrl","imgStyles","search","Component","Skeleton","Spinner","ErrorMessage"],"sourceRoot":""}