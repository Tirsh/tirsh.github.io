{"version":3,"file":"static/js/46.4ecf99b5.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/findChar/FindChar.js","components/pages/MainPage.js","services/MarvelServices.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\n\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n    const {getCharacter, clearError, setProcess, process} = useMarvelServices();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {title, description, thumbnail, homepage, wiki} = data;   \r\n    const {editPictureStyles} = useMarvelServices();\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n        <img style={editPictureStyles(thumbnail)} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\r\n        <div className=\"randomchar__info\">\r\n            <p className=\"randomchar__name\">{title}</p>\r\n            <p className=\"randomchar__descr\">\r\n                {description ? \r\n                    description.length > 155 ?  description.slice(0, 154) + \"...\" : description \r\n                        : \"We don't have any information about this character!\"}\r\n            </p>\r\n            <div className=\"randomchar__btns\">\r\n                <a href={homepage} className=\"button button__main\">\r\n                    <div className=\"inner\">homepage</div>\r\n                </a>\r\n                <a href={wiki} className=\"button button__secondary\">\r\n                    <div className=\"inner\">Wiki</div>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default RandomChar;","import { useEffect, useState, useRef, useMemo } from 'react';\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n    const [charsData, setCharsData] = useState([]);\r\n    const [charsAdding, setCharsAdding] = useState(false);\r\n    const {getAllCharacters, editPictureStyles, process, setProcess} = useMarvelServices();\r\n    const itemsRefs = useRef([]);\r\n\r\n    const setContent = (process, Component) => {\r\n        switch (process) {\r\n            case 'waiting':\r\n                return <Spinner/>;\r\n            case 'loading':\r\n                return charsAdding ? <Component/> : <Spinner/>;\r\n            case 'error':\r\n                return <ErrorMessage/>\r\n            case 'confirmed':\r\n                return <Component/>\r\n            default:\r\n                throw new Error('Unexpected process state');\r\n        }\r\n    }\r\n\r\n    const onDataLoad = (data) => {\r\n        setCharsData(charsData => [...charsData, ...data]);\r\n        setCharsAdding(() => false);\r\n    };\r\n\r\n    const focusOnItem = (id) => {\r\n        console.log(\"focus\");\r\n        console.log(itemsRefs.current[id]);\r\n        itemsRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemsRefs.current[id].classList.add('char__item_selected');\r\n        itemsRefs.current[id].focus();\r\n        \r\n    };\r\n\r\n    useEffect(() => {\r\n        onDataUpdate(true);\r\n    }, []);\r\n\r\n    const onDataUpdate = (initial) => {\r\n        const offset = Math.floor(Math.random()*300);\r\n        initial ? setCharsAdding(false): setCharsAdding(true);\r\n        getAllCharacters(offset)\r\n            .then(onDataLoad)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const renderItems = (data) => {      \r\n        const chars = data.map((item, i) => {\r\n            return (\r\n                <li \r\n                    tabIndex={0}\r\n                    ref={el => itemsRefs.current[i] = el} \r\n                    className='char__item'\r\n                    onClick={() => {\r\n                        props.onCharSelect(item.id);\r\n                        focusOnItem(i)\r\n                    }}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelect(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}>\r\n                    <img style={editPictureStyles(item.thumbnail)} src={item.thumbnail} alt={`c${item.id}`}/>\r\n                    <div className=\"char__name\">{item.title}</div>\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n                <ul className=\"char__grid\">\r\n                    {chars}                  \r\n                </ul>\r\n            )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderItems(charsData));\r\n    }, [process])\r\n\r\n    return (\r\n        <div className=\"char__list\">                \r\n            {elements}             \r\n            <button disabled={charsAdding} onClick={() => onDataUpdate(false)} className=\"button button__main button__long\">\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nCharList.propTypes = {\r\n    onCharSelect: PropTypes.func\r\n}\r\n\r\nexport default CharList;","import { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport setContent from '../../utils/setContent';\r\nimport './charInfo.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CharInfo = (props) => {\r\n    const {getCharacter, setProcess, process} = useMarvelServices();\r\n    const [char, setChar] = useState(null);\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId]);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId){\r\n            return;\r\n        }\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {title, description, thumbnail, homepage, wiki, stories} = data;\r\n    const {editPictureStyles} = useMarvelServices();\r\n    return (\r\n    <>\r\n            <div className=\"char__basics\">\r\n                <img style={editPictureStyles(thumbnail)} src={thumbnail} alt={title}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{title}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {stories.length === 0 ? \"We don't have information about this character's stories!\" : null}\r\n                { \r\n                    stories.map((item, i) => {\r\n                        if (i > 9) {\r\n                            return\r\n                        }\r\n                        return (\r\n                        <li key={i} className=\"char__comics-item\">\r\n                            <Link to={`/comics/${item.resourceURI.match(/\\/\\d+/)[0].substring(1)}`}>\r\n                                {item.name}\r\n                            </Link>\r\n                        </li>\r\n                    )})\r\n                }\r\n            </ul>        \r\n        </>\r\n    );\r\n\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport useMarvelServices from '../../services/MarvelServices';\r\nimport './findChar.scss';\r\n\r\nconst FindChar = () => {\r\n    const [findedChar, setFindedChar] = useState(null);\r\n    const [notFound, setNotFound] = useState(false);\r\n    const { getCharacterByName } = useMarvelServices(); \r\n    const onCharSearch = (value) => {\r\n        getCharacterByName(value.char)\r\n            .then(result => result ?  setFindedChar(result) : setNotFound(true))\r\n    }\r\n\r\n    return (\r\n        <div className=\"find-char\">\r\n            <Formik                \r\n                initialValues={{char: ''}}\r\n                validationSchema = {Yup.object({\r\n                    char: Yup.string()\r\n                        .required(\"This field is required\")\r\n                })}\r\n                onSubmit={(values, actions) => {\r\n                    onCharSearch(values);\r\n                    actions.resetForm();\r\n                }}                \r\n            >\r\n                <Form>\r\n                    <label className='find-char__label' htmlFor=\"char\">Or find a character by name:</label>\r\n                    <Field onBlur={()=>{setNotFound(false)}} className='find-char__input' type=\"text\" name=\"char\" placeholder=\"Enter name\"/>\r\n                    <button className='button button__main find-char__btn' type=\"submit\">\r\n                        <div className=\"inner\">FIND</div>\r\n                    </button>\r\n                    <ErrorMessage className='find-char__message find-char__message_error' name=\"char\" component='div'/>\r\n                </Form>\r\n            </Formik>\r\n            {findedChar ? <VisitPage char={findedChar}/> : null}\r\n            {notFound ? (<div className=\"find-char__message find-char__message_error\">The character was not found. Check the name and try again</div>) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst VisitPage = ({char}) => {\r\n    return (\r\n        <div className=\"find-char__visit\">\r\n            <div className=\"find-char__message find-char__message_success\">{`There is! Visit ${char.name} page?`}</div>\r\n            <Link to={`/character/${char.id}`} className='button button__secondary' type=\"submit\">\r\n                        <div className=\"inner\">TO PAGE</div>\r\n            </Link>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default FindChar;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport FindChar from \"../findChar/FindChar\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n    const onCharSelect = (id) => {\r\n        setSelectedChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <CharList onCharSelect={onCharSelect}/>\r\n                <div>\r\n                    <CharInfo charId={selectedChar}/>\r\n                    <FindChar/>\r\n                </div>                \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelServices = () => {\r\n\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apikey = 'apikey=5b914e3fbef97f81d2a62f14f887c53d';\r\n\r\n    const getAllCharacters = async (offset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComic = async (offset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apikey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apikey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&limit=2&${_apikey}`);\r\n        if (res.data.total === 0 ) {\r\n            return null\r\n        }\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformDescription = (descr) => {\r\n        if(!descr) {\r\n            return \"We don't have any information about this character!\"\r\n        }\r\n        return descr;\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            title: char.name,\r\n            description: _transformDescription(char.description),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            stories: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description,\r\n            pages: comic.pageCount,\r\n            lang: null,\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price\r\n        }\r\n    }\r\n\r\n    const editPictureStyles = (pictureUrl) => {\r\n        if (!pictureUrl) {\r\n            return null;\r\n        }\r\n        const imgStyles = {objectFit: 'cover'};\r\n        if (pictureUrl.search(/image_not_available/) !== -1) {\r\n            imgStyles.objectFit = 'contain';\r\n        }\r\n        return imgStyles;\r\n    }\r\n\r\n    return {loading,\r\n            error,\r\n            getAllCharacters, \r\n            getCharacter, \r\n            getCharacterByName, \r\n            getAllComic, \r\n            getComic, \r\n            editPictureStyles, \r\n            clearError, \r\n            process,\r\n            setProcess\r\n        }\r\n}\r\n\r\nexport default useMarvelServices;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);  \r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method=\"GET\", body=null, headers = {'Content-Type': 'application/json'} ) => {\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e){\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n        }, []);\r\n    return {loading, request, error, clearError, process, setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","title","description","thumbnail","homepage","wiki","editPictureStyles","useMarvelServices","_jsxs","className","children","length","slice","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelServices","getCharacter","clearError","setProcess","process","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charsData","setCharsData","_useState3","_useState4","charsAdding","setCharsAdding","getAllCharacters","itemsRefs","useRef","onDataLoad","concat","_toConsumableArray","focusOnItem","console","log","current","forEach","item","classList","remove","add","focus","onDataUpdate","initial","offset","elements","useMemo","Component","Spinner","ErrorMessage","Error","chars","map","i","tabIndex","ref","el","onCharSelect","onKeyDown","e","key","renderItems","disabled","stories","_Fragment","Link","to","resourceURI","match","substring","name","charId","VisitPage","type","findedChar","setFindedChar","notFound","setNotFound","getCharacterByName","Formik","initialValues","validationSchema","Yup","required","onSubmit","values","actions","result","resetForm","Form","htmlFor","Field","onBlur","placeholder","component","selectedChar","setSelectedChar","Helmet","content","ErrorBoundary","RandomChar","CharList","CharInfo","FindChar","decoration","_useHttp","loading","setLoading","error","setError","_useState5","_useState6","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","message","stop","_x","apply","useHttp","_apiBase","_apikey","res","results","_transformCharacter","getAllComic","_ref2","_callee2","_context2","_transformComic","_x2","_ref3","_callee3","_context3","_x3","getComic","_ref4","_callee4","_context4","_x4","_ref5","_callee5","_context5","total","_x5","descr","path","extension","urls","comics","items","comic","pages","pageCount","lang","price","prices","pictureUrl","imgStyles","search","Skeleton"],"sourceRoot":""}